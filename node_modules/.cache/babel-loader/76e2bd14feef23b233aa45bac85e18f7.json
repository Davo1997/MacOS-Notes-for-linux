{"ast":null,"code":"'use strict';\n\nconst MySQLQueryGenerator = require('../mysql/query-generator');\n\nconst Utils = require('./../../utils');\n\nclass MariaDBQueryGenerator extends MySQLQueryGenerator {\n  createSchema(schema, options) {\n    options = {\n      charset: null,\n      collate: null,\n      ...options\n    };\n    return Utils.joinSQLFragments(['CREATE SCHEMA IF NOT EXISTS', this.quoteIdentifier(schema), options.charset && \"DEFAULT CHARACTER SET \".concat(this.escape(options.charset)), options.collate && \"DEFAULT COLLATE \".concat(this.escape(options.collate)), ';']);\n  }\n\n  dropSchema(schema) {\n    return \"DROP SCHEMA IF EXISTS \".concat(this.quoteIdentifier(schema), \";\");\n  }\n\n  showSchemasQuery(options) {\n    const schemasToSkip = ['\\'MYSQL\\'', '\\'INFORMATION_SCHEMA\\'', '\\'PERFORMANCE_SCHEMA\\''];\n\n    if (options.skip && Array.isArray(options.skip) && options.skip.length > 0) {\n      for (const schemaName of options.skip) {\n        schemasToSkip.push(this.escape(schemaName));\n      }\n    }\n\n    return Utils.joinSQLFragments(['SELECT SCHEMA_NAME as schema_name', 'FROM INFORMATION_SCHEMA.SCHEMATA', \"WHERE SCHEMA_NAME NOT IN (\".concat(schemasToSkip.join(', '), \")\"), ';']);\n  }\n\n  showTablesQuery(database) {\n    let query = 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\n\n    if (database) {\n      query += \" AND TABLE_SCHEMA = \".concat(this.escape(database));\n    } else {\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\')';\n    }\n\n    return \"\".concat(query, \";\");\n  }\n\n}\n\nmodule.exports = MariaDBQueryGenerator;","map":null,"metadata":{},"sourceType":"script"}