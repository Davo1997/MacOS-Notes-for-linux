{"ast":null,"code":"'use strict';\n\nconst BaseError = require('./base-error');\n/**\n * A wrapper for multiple Errors\n *\n * @param {Error[]} [errors] Array of errors\n *\n * @property errors {Error[]}\n */\n\n\nclass AggregateError extends BaseError {\n  constructor(errors) {\n    super();\n    this.errors = errors;\n    this.name = 'AggregateError';\n  }\n\n  toString() {\n    const message = \"AggregateError of:\\n\".concat(this.errors.map(error => error === this ? '[Circular AggregateError]' : error instanceof AggregateError ? String(error).replace(/\\n$/, '').replace(/^/mg, '  ') : String(error).replace(/^/mg, '    ').substring(2)).join('\\n'), \"\\n\");\n    return message;\n  }\n\n}\n\nmodule.exports = AggregateError;","map":null,"metadata":{},"sourceType":"script"}