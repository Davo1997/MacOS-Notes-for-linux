{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nclass Command extends EventEmitter {\n  constructor() {\n    super();\n    this.next = null;\n  } // slow. debug only\n\n\n  stateName() {\n    const state = this.next;\n\n    for (const i in this) {\n      if (this[i] === state && i !== 'next') {\n        return i;\n      }\n    }\n\n    return 'unknown name';\n  }\n\n  execute(packet, connection) {\n    if (!this.next) {\n      this.next = this.start;\n\n      connection._resetSequenceId();\n    }\n\n    if (packet && packet.isError()) {\n      const err = packet.asError(connection.clientEncoding);\n\n      if (this.onResult) {\n        this.onResult(err);\n        this.emit('end');\n      } else {\n        this.emit('error', err);\n        this.emit('end');\n      }\n\n      return true;\n    } // TODO: don't return anything from execute, it's ugly and error-prone. Listen for 'end' event in connection\n\n\n    this.next = this.next(packet, connection);\n\n    if (this.next) {\n      return false;\n    }\n\n    this.emit('end');\n    return true;\n  }\n\n}\n\nmodule.exports = Command;","map":null,"metadata":{},"sourceType":"script"}