{"ast":null,"code":"'use strict';\n\nconst process = require('process');\n\nconst mysql = require('../index.js');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst PoolConnection = require('./pool_connection.js');\n\nconst Queue = require('denque');\n\nconst Connection = require('./connection.js');\n\nfunction spliceConnection(queue, connection) {\n  const len = queue.length;\n\n  for (let i = 0; i < len; i++) {\n    if (queue.get(i) === connection) {\n      queue.removeOne(i);\n      break;\n    }\n  }\n}\n\nclass Pool extends EventEmitter {\n  constructor(options) {\n    super();\n    this.config = options.config;\n    this.config.connectionConfig.pool = this;\n    this._allConnections = new Queue();\n    this._freeConnections = new Queue();\n    this._connectionQueue = new Queue();\n    this._closed = false;\n  }\n\n  promise(promiseImpl) {\n    const PromisePool = require('../promise').PromisePool;\n\n    return new PromisePool(this, promiseImpl);\n  }\n\n  getConnection(cb) {\n    if (this._closed) {\n      return process.nextTick(() => cb(new Error('Pool is closed.')));\n    }\n\n    let connection;\n\n    if (this._freeConnections.length > 0) {\n      connection = this._freeConnections.shift();\n      this.emit('acquire', connection);\n      return process.nextTick(() => cb(null, connection));\n    }\n\n    if (this.config.connectionLimit === 0 || this._allConnections.length < this.config.connectionLimit) {\n      connection = new PoolConnection(this, {\n        config: this.config.connectionConfig\n      });\n\n      this._allConnections.push(connection);\n\n      return connection.connect(err => {\n        if (this._closed) {\n          return cb(new Error('Pool is closed.'));\n        }\n\n        if (err) {\n          return cb(err);\n        }\n\n        this.emit('connection', connection);\n        this.emit('acquire', connection);\n        return cb(null, connection);\n      });\n    }\n\n    if (!this.config.waitForConnections) {\n      return process.nextTick(() => cb(new Error('No connections available.')));\n    }\n\n    if (this.config.queueLimit && this._connectionQueue.length >= this.config.queueLimit) {\n      return cb(new Error('Queue limit reached.'));\n    }\n\n    this.emit('enqueue');\n    return this._connectionQueue.push(cb);\n  }\n\n  releaseConnection(connection) {\n    let cb;\n\n    if (!connection._pool) {\n      // The connection has been removed from the pool and is no longer good.\n      if (this._connectionQueue.length) {\n        cb = this._connectionQueue.shift();\n        process.nextTick(this.getConnection.bind(this, cb));\n      }\n    } else if (this._connectionQueue.length) {\n      cb = this._connectionQueue.shift();\n      process.nextTick(cb.bind(null, null, connection));\n    } else {\n      this._freeConnections.push(connection);\n\n      this.emit('release', connection);\n    }\n  }\n\n  end(cb) {\n    this._closed = true;\n\n    if (typeof cb !== 'function') {\n      cb = function (err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n\n    let calledBack = false;\n    let closedConnections = 0;\n    let connection;\n\n    const endCB = function (err) {\n      if (calledBack) {\n        return;\n      }\n\n      if (err || ++closedConnections >= this._allConnections.length) {\n        calledBack = true;\n        cb(err);\n        return;\n      }\n    }.bind(this);\n\n    if (this._allConnections.length === 0) {\n      endCB();\n      return;\n    }\n\n    for (let i = 0; i < this._allConnections.length; i++) {\n      connection = this._allConnections.get(i);\n\n      connection._realEnd(endCB);\n    }\n  }\n\n  query(sql, values, cb) {\n    const cmdQuery = Connection.createQuery(sql, values, cb, this.config.connectionConfig);\n\n    if (typeof cmdQuery.namedPlaceholders === 'undefined') {\n      cmdQuery.namedPlaceholders = this.config.connectionConfig.namedPlaceholders;\n    }\n\n    this.getConnection((err, conn) => {\n      if (err) {\n        if (typeof cmdQuery.onResult === 'function') {\n          cmdQuery.onResult(err);\n        } else {\n          cmdQuery.emit('error', err);\n        }\n\n        return;\n      }\n\n      try {\n        conn.query(cmdQuery).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n    return cmdQuery;\n  }\n\n  execute(sql, values, cb) {\n    // TODO construct execute command first here and pass it to connection.execute\n    // so that polymorphic arguments logic is there in one place\n    if (typeof values === 'function') {\n      cb = values;\n      values = [];\n    }\n\n    this.getConnection((err, conn) => {\n      if (err) {\n        return cb(err);\n      }\n\n      try {\n        conn.execute(sql, values, cb).once('end', () => {\n          conn.release();\n        });\n      } catch (e) {\n        conn.release();\n        throw e;\n      }\n    });\n  }\n\n  _removeConnection(connection) {\n    // Remove connection from all connections\n    spliceConnection(this._allConnections, connection); // Remove connection from free connections\n\n    spliceConnection(this._freeConnections, connection);\n    this.releaseConnection(connection);\n  }\n\n  format(sql, values) {\n    return mysql.format(sql, values, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n\n  escape(value) {\n    return mysql.escape(value, this.config.connectionConfig.stringifyObjects, this.config.connectionConfig.timezone);\n  }\n\n  escapeId(value) {\n    return mysql.escapeId(value, false);\n  }\n\n}\n\nmodule.exports = Pool;","map":null,"metadata":{},"sourceType":"script"}