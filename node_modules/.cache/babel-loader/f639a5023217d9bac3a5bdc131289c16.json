{"ast":null,"code":"var _jsxFileName = \"/home/davo/workspace/react-electron/src/Components/Notes.jsx\";\nimport React from 'react';\nimport { Container, Row, Col, Modal, Button } from 'react-bootstrap';\nimport './components.css';\n\nclass Notes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createNote = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.saveNote = () => {\n      // save this.state.selectedNote\n      this.handleCloseModal();\n    };\n\n    this.handleCloseModal = () => {\n      this.setState({\n        showModal: false,\n        selectedNote: {}\n      });\n    };\n\n    this.onClickNote = note => {\n      this.setState({\n        selectedNote: note,\n        showModal: true\n      });\n    };\n\n    this.changeTitle = e => {\n      let newNote = this.state.selectedNote;\n      newNote.title = e.target.value;\n      this.setState({\n        selectedNote: newNote\n      });\n    };\n\n    this.changeText = e => {\n      let newNote = this.state.selectedNote;\n      newNote.text = e.target.value;\n      this.setState({\n        selectedNote: newNote\n      });\n      console.log(this.state.selectedNote); // this.autoGrowTextArea();\n    };\n\n    this.autoGrowTextArea = () => {\n      let element = this.textInput.current;\n      element.style.height = '5px';\n      element.style.height = element.scrollHeight + 'px';\n    };\n\n    this.autoGrowNote = element => {\n      element.style.height = '5px';\n      element.style.height = element.scrollHeight + 'px';\n    };\n\n    this.textInput = React.createRef();\n    this.notesRefs = [];\n    this.state = {\n      showModal: false,\n      // notes: [\n      //   {\n      //     id: 1,\n      //     title: 'note 1',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 2,\n      //     title: 'note 2',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 3,\n      //     title: 'note 3',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 4,\n      //     title: 'note 4',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 5,\n      //     title: 'note 5',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   }\n      // ],\n      notes: [],\n      selectedNote: {}\n    };\n  }\n\n  componentDidUpdate() {\n    this.autoGrowTextArea();\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"notes-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 3,\n      onClick: this.createNote,\n      key: \"initial\",\n      className: \"create-note\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"plus fas fa-plus-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), this.state.notes.map(note => {\n      // let ref = React.createRef();\n      // this.notesRefs.push(ref);\n      return React.createElement(Col, {\n        sm: 3,\n        className: \"note-col\",\n        onClick: () => this.onClickNote(note),\n        key: note.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"note-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, note.title), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, note.text));\n    })), React.createElement(Modal, {\n      show: this.state.showModal,\n      onHide: this.handleCloseModal,\n      backdrop: \"static\",\n      keyboard: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      onChange: this.changeTitle,\n      className: \"modal-title-textarea\",\n      defaultValue: this.state.selectedNote.title,\n      maxLength: \"25\",\n      placeholder: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(Modal.Body, {\n      className: \"modal-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      ref: this.textInput,\n      onChange: this.changeText,\n      className: \"modal-text-textarea\",\n      defaultValue: this.state.selectedNote.text,\n      placeholder: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.handleCloseModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Close\"), React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.saveNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Save\"))));\n  }\n\n}\n\nexport default Notes;","map":{"version":3,"sources":["/home/davo/workspace/react-electron/src/Components/Notes.jsx"],"names":["React","Container","Row","Col","Modal","Button","Notes","Component","constructor","props","createNote","setState","showModal","saveNote","handleCloseModal","selectedNote","onClickNote","note","changeTitle","e","newNote","state","title","target","value","changeText","text","console","log","autoGrowTextArea","element","textInput","current","style","height","scrollHeight","autoGrowNote","createRef","notesRefs","notes","componentDidUpdate","render","map","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Row, Col, Modal, Button } from 'react-bootstrap';\nimport './components.css';\n\nclass Notes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.notesRefs = [];\n    this.state = {\n      showModal: false,\n      // notes: [\n      //   {\n      //     id: 1,\n      //     title: 'note 1',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 2,\n      //     title: 'note 2',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 3,\n      //     title: 'note 3',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 4,\n      //     title: 'note 4',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   },\n      //   {\n      //     id: 5,\n      //     title: 'note 5',\n      //     text: 'Lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white lorem ipsum dolor white',\n      //   }\n      // ],\n      notes: [],\n      selectedNote: {},\n    }\n  }\n\n  componentDidUpdate() {\n    this.autoGrowTextArea();\n  }\n\n  createNote = () => {\n    this.setState({ showModal: true });\n  }\n\n  saveNote = () => {\n    // save this.state.selectedNote\n    this.handleCloseModal();\n  }\n\n  handleCloseModal = () => {\n    this.setState({ showModal: false, selectedNote: {} });\n  }\n\n  onClickNote = (note) => {\n    this.setState({ selectedNote: note, showModal: true });\n  }\n\n  changeTitle = (e) => {\n    let newNote = this.state.selectedNote;\n    newNote.title = e.target.value;\n    this.setState({ selectedNote: newNote })\n  }\n\n  changeText = (e) => {\n    let newNote = this.state.selectedNote;\n    newNote.text = e.target.value;\n    this.setState({ selectedNote: newNote });\n    console.log(this.state.selectedNote);\n    // this.autoGrowTextArea();\n  }\n\n  autoGrowTextArea = () => {\n    let element = this.textInput.current;\n    element.style.height = '5px';\n    element.style.height = (element.scrollHeight)+'px';\n  }\n\n  autoGrowNote = (element) => {\n    element.style.height = '5px';\n    element.style.height = (element.scrollHeight)+'px';\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row className='notes-row'>\n          <Col\n            sm={3}\n            onClick={this.createNote}\n            key='initial'\n            className='create-note'\n          >\n            <i class=\"plus fas fa-plus-circle\"></i>\n          </Col>\n          {\n            this.state.notes.map(note => {\n              // let ref = React.createRef();\n              // this.notesRefs.push(ref);\n              return (\n                <Col\n                  sm={3}\n                  className='note-col'\n                  onClick={() => this.onClickNote(note)}\n                  key={note.id}\n                >\n                  <p className='note-title'>{note.title}</p>\n                  <div>{note.text}</div>\n                </Col>\n              );\n            })\n          }\n        </Row>\n        <Modal\n          show={this.state.showModal}\n          onHide={this.handleCloseModal}\n          backdrop='static'\n          keyboard={false}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <textarea\n                onChange={this.changeTitle}\n                className='modal-title-textarea'\n                defaultValue={this.state.selectedNote.title}\n                maxLength='25'\n                placeholder='title'\n              >\n              </textarea>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body className='modal-body'>\n            <textarea\n              ref={this.textInput}\n              onChange={this.changeText}\n              className='modal-text-textarea'\n              defaultValue={this.state.selectedNote.text}\n              placeholder='text'\n            >\n            </textarea>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant='secondary' onClick={this.handleCloseModal}>Close</Button>\n            <Button variant='primary' onClick={this.saveNote}>Save</Button>\n          </Modal.Footer>\n        </Modal>\n      </Container>\n    );\n  }\n}\n\nexport default Notes;"]},"metadata":{},"sourceType":"module"}