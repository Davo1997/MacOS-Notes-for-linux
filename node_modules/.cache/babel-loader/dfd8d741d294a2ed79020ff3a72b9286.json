{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/davo/workspace/react-electron/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst sequelizeErrors = require('../../errors');\n\nconst _require = require('../abstract/query-interface'),\n      QueryInterface = _require.QueryInterface;\n\nconst QueryTypes = require('../../query-types');\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\n\n\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const _ref = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), {\n      raw: true,\n      ...options\n    }),\n          _ref2 = _slicedToArray(_ref, 1),\n          results = _ref2[0]; //Exclude primary key constraint\n\n\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), {\n        raw: true,\n        ...options\n      })));\n    }\n\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), {\n      raw: true,\n      ...options\n    });\n  }\n  /**\n   * @override\n   */\n\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options\n    };\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  /**\n   * @override\n   */\n\n\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    });\n    const constraint = constraints[0];\n    let query;\n\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: \"Constraint \".concat(constraintName, \" on table \").concat(tableName, \" does not exist\"),\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":null,"metadata":{},"sourceType":"script"}