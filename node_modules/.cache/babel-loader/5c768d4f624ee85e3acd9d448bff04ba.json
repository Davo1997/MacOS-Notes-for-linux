{"ast":null,"code":"'use strict';\n\nconst CommandCode = require('../constants/commands.js');\n\nconst ClientConstants = require('../constants/client.js');\n\nconst Packet = require('../packets/packet.js');\n\nconst auth41 = require('../auth_41.js');\n\nconst CharsetToEncoding = require('../constants/charset_encodings.js'); // https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\n\n\nclass ChangeUser {\n  constructor(opts) {\n    this.flags = opts.flags;\n    this.user = opts.user || '';\n    this.database = opts.database || '';\n    this.password = opts.password || '';\n    this.passwordSha1 = opts.passwordSha1;\n    this.authPluginData1 = opts.authPluginData1;\n    this.authPluginData2 = opts.authPluginData2;\n    this.connectAttributes = opts.connectAttrinutes || {};\n    let authToken;\n\n    if (this.passwordSha1) {\n      authToken = auth41.calculateTokenFromPasswordSha(this.passwordSha1, this.authPluginData1, this.authPluginData2);\n    } else {\n      authToken = auth41.calculateToken(this.password, this.authPluginData1, this.authPluginData2);\n    }\n\n    this.authToken = authToken;\n    this.charsetNumber = opts.charsetNumber;\n  } // TODO\n  // ChangeUser.fromPacket = function(packet)\n  // };\n\n\n  serializeToBuffer(buffer) {\n    const isSet = flag => this.flags & ClientConstants[flag];\n\n    const packet = new Packet(0, buffer, 0, buffer.length);\n    packet.offset = 4;\n    const encoding = CharsetToEncoding[this.charsetNumber];\n    packet.writeInt8(CommandCode.CHANGE_USER);\n    packet.writeNullTerminatedString(this.user, encoding);\n\n    if (isSet('SECURE_CONNECTION')) {\n      packet.writeInt8(this.authToken.length);\n      packet.writeBuffer(this.authToken);\n    } else {\n      packet.writeBuffer(this.authToken);\n      packet.writeInt8(0);\n    }\n\n    packet.writeNullTerminatedString(this.database, encoding);\n    packet.writeInt16(this.charsetNumber);\n\n    if (isSet('PLUGIN_AUTH')) {\n      // TODO: read this from parameters\n      packet.writeNullTerminatedString('mysql_native_password', 'latin1');\n    }\n\n    if (isSet('CONNECT_ATTRS')) {\n      const connectAttributes = this.connectAttributes;\n      const attrNames = Object.keys(connectAttributes);\n      let keysLength = 0;\n\n      for (let k = 0; k < attrNames.length; ++k) {\n        keysLength += Packet.lengthCodedStringLength(attrNames[k], encoding);\n        keysLength += Packet.lengthCodedStringLength(connectAttributes[attrNames[k]], encoding);\n      }\n\n      packet.writeLengthCodedNumber(keysLength);\n\n      for (let k = 0; k < attrNames.length; ++k) {\n        packet.writeLengthCodedString(attrNames[k], encoding);\n        packet.writeLengthCodedString(connectAttributes[attrNames[k]], encoding);\n      }\n    }\n\n    return packet;\n  }\n\n  toPacket() {\n    if (typeof this.user !== 'string') {\n      throw new Error('\"user\" connection config property must be a string');\n    }\n\n    if (typeof this.database !== 'string') {\n      throw new Error('\"database\" connection config property must be a string');\n    } // dry run: calculate resulting packet length\n\n\n    const p = this.serializeToBuffer(Packet.MockBuffer());\n    return this.serializeToBuffer(Buffer.allocUnsafe(p.offset));\n  }\n\n}\n\nmodule.exports = ChangeUser;","map":null,"metadata":{},"sourceType":"script"}