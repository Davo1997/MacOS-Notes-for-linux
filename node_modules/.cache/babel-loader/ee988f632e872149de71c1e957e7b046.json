{"ast":null,"code":"'use strict';\n\nconst Connection = require('../index.js').Connection;\n\nclass PoolConnection extends Connection {\n  constructor(pool, options) {\n    super(options);\n    this._pool = pool; // When a fatal error occurs the connection's protocol ends, which will cause\n    // the connection to end as well, thus we only need to watch for the end event\n    // and we will be notified of disconnects.\n    // REVIEW: Moved to `once`\n\n    this.once('end', () => {\n      this._removeFromPool();\n    });\n    this.once('error', () => {\n      this._removeFromPool();\n    });\n  }\n\n  release() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n\n    this._pool.releaseConnection(this);\n  }\n\n  promise(promiseImpl) {\n    const PromisePoolConnection = require('../promise').PromisePoolConnection;\n\n    return new PromisePoolConnection(this, promiseImpl);\n  }\n\n  end() {\n    const err = new Error('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n    this.emit('warn', err); // eslint-disable-next-line no-console\n\n    console.warn(err.message);\n    this.release();\n  }\n\n  destroy() {\n    this._removeFromPool();\n\n    super.destroy();\n  }\n\n  _removeFromPool() {\n    if (!this._pool || this._pool._closed) {\n      return;\n    }\n\n    const pool = this._pool;\n    this._pool = null;\n\n    pool._removeConnection(this);\n  }\n\n}\n\nPoolConnection.statementKey = Connection.statementKey;\nmodule.exports = PoolConnection; // TODO: Remove this when we are removing PoolConnection#end\n\nPoolConnection.prototype._realEnd = Connection.prototype.end;","map":null,"metadata":{},"sourceType":"script"}