{"ast":null,"code":"'use strict';\n/*\n\n  this seems to be not only shorter, but faster than\n  string.replace(/\\\\/g, '\\\\\\\\').\n            replace(/\\u0008/g, '\\\\b').\n            replace(/\\t/g, '\\\\t').\n            replace(/\\n/g, '\\\\n').\n            replace(/\\f/g, '\\\\f').\n            replace(/\\r/g, '\\\\r').\n            replace(/'/g, '\\\\\\'').\n            replace(/\"/g, '\\\\\"');\n  or string.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\")\n  see http://jsperf.com/string-escape-regexp-vs-json-stringify\n  */\n\nfunction srcEscape(str) {\n  return JSON.stringify({\n    [str]: 1\n  }).slice(1, -3);\n}\n\nexports.srcEscape = srcEscape;\nlet highlightFn;\nlet cardinalRecommended = false;\n\ntry {\n  highlightFn = require('cardinal').highlight;\n} catch (err) {\n  highlightFn = text => {\n    if (!cardinalRecommended) {\n      // eslint-disable-next-line no-console\n      console.log('For nicer debug output consider install cardinal@^2.0.0');\n      cardinalRecommended = true;\n    }\n\n    return text;\n  };\n}\n/**\n * Prints debug message with code frame, will try to use `cardinal` if available.\n */\n\n\nfunction printDebugWithCode(msg, code) {\n  // eslint-disable-next-line no-console\n  console.log(\"\\n\\n\".concat(msg, \":\\n\")); // eslint-disable-next-line no-console\n\n  console.log(\"\".concat(highlightFn(code), \"\\n\"));\n}\n\nexports.printDebugWithCode = printDebugWithCode;\n/**\n * checks whether the `type` is in the `list`\n */\n\nfunction typeMatch(type, list, Types) {\n  if (Array.isArray(list)) {\n    return list.some(t => type === Types[t]);\n  }\n\n  return !!list;\n}\n\nexports.typeMatch = typeMatch;","map":null,"metadata":{},"sourceType":"script"}