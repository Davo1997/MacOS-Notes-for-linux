{"ast":null,"code":"'use strict';\n\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\n\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n * \n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n * \n * @param {string[]} parts\n * @returns {string}\n * @private\n */\n\n\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({\n    skipNextLeadingSpace,\n    result\n  }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += \" \".concat(part.trim());\n    }\n\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: ''\n  }).result;\n}\n/**\n * Joins an array with a single space, auto trimming when needed.\n * \n * Certain elements do not get leading/trailing spaces.\n * \n * @param {any[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n * \n * @returns {string} The joined string.\n * \n * @private\n */\n\n\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return ''; // Skip falsy fragments\n\n  array = array.filter(x => x); // Resolve recursive calls\n\n  array = array.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n\n    return fragment;\n  }); // Ensure strings\n\n  for (const fragment of array) {\n    if (fragment && typeof fragment !== 'string') {\n      const error = new TypeError(\"Tried to construct a SQL string with a non-string, non-falsy fragment (\".concat(fragment, \").\"));\n      error.args = array;\n      error.fragment = fragment;\n      throw error;\n    }\n  } // Trim fragments\n\n\n  array = array.map(x => x.trim()); // Skip full-whitespace fragments (empty after the above trim)\n\n  array = array.filter(x => x !== '');\n  return singleSpaceJoinHelper(array);\n}\n\nexports.joinSQLFragments = joinSQLFragments;","map":null,"metadata":{},"sourceType":"script"}